using System.Data.Common;
using Application.Abstractions.Data;
using Application.Abstractions.Messaging;
using Dapper;
using SharedKernel;

namespace Application.Brands.SyncBramds;
internal sealed class SyncBrandsCommandHandler(
    IDbConnectionFactory dbConnectionFactory)
    : ICommandHandler<SyncBrandsCommand>
{
    public async Task<Result> Handle(SyncBrandsCommand command, CancellationToken cancellationToken)
    {
        await using DbConnection connection = await dbConnectionFactory.OpenConnectionAsync();

        const string sql = $"""
            -- Ensure silver table exicts
            CREATE TABLE IF NOT EXISTS silver.brands (
                brand_id integer GENERATED BY DEFAULT AS IDENTITY,
                brand_name character varying(500) NOT NULL,
                CONSTRAINT pk_brands PRIMARY KEY (brand_id)
            );

            -- Upsert from bronze
            INSERT INTO silver.brands (brand_id, brand_name)
            SELECT CAST(brand_id AS INT), brand_name
            FROM bronze.brands
            ON CONFLICT (brand_id) DO UPDATE
            SET brand_name = EXCLUDED.brand_name;

            -- Delete brands that no longer exist in bronze
            DELETE FROM silver.brands
            WHERE brand_id NOT IN (
                SELECT DISTINCT CAST(brand_id AS INT) FROM bronze.brands
            );
            """;

        await connection.ExecuteAsync(sql);

        return Result.Success();
    }
}
