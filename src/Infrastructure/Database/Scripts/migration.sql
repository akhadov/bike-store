CREATE TABLE IF NOT EXISTS public."__EFMigrationsHistory" (
    migration_id character varying(150) NOT NULL,
    product_version character varying(32) NOT NULL,
    CONSTRAINT pk___ef_migrations_history PRIMARY KEY (migration_id)
);

START TRANSACTION;
DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM pg_namespace WHERE nspname = 'silver') THEN
        CREATE SCHEMA silver;
    END IF;
END $EF$;

CREATE TABLE silver.brands (
    brand_id integer GENERATED BY DEFAULT AS IDENTITY,
    brand_name character varying(500) NOT NULL,
    CONSTRAINT pk_brands PRIMARY KEY (brand_id)
);

CREATE TABLE silver.categories (
    category_id integer GENERATED BY DEFAULT AS IDENTITY,
    category_name character varying(500) NOT NULL,
    CONSTRAINT pk_categories PRIMARY KEY (category_id)
);

CREATE TABLE silver.customers (
    customer_id integer GENERATED BY DEFAULT AS IDENTITY,
    first_name character varying(250) NOT NULL,
    last_name character varying(250) NOT NULL,
    phone character varying(50),
    email character varying(500) NOT NULL,
    street text NOT NULL,
    city text NOT NULL,
    state text NOT NULL,
    zip_code text NOT NULL,
    CONSTRAINT pk_customers PRIMARY KEY (customer_id)
);

CREATE TABLE silver.staffs (
    staff_id integer GENERATED BY DEFAULT AS IDENTITY,
    first_name character varying(250) NOT NULL,
    last_name character varying(250) NOT NULL,
    email text NOT NULL,
    phone character varying(25),
    active boolean NOT NULL,
    store_id integer NOT NULL,
    manager_id integer,
    CONSTRAINT pk_staffs PRIMARY KEY (staff_id),
    CONSTRAINT fk_staffs_staffs_manager_id FOREIGN KEY (manager_id) REFERENCES silver.staffs (staff_id)
);

CREATE TABLE silver.stores (
    store_id integer GENERATED BY DEFAULT AS IDENTITY,
    store_name text NOT NULL,
    phone character varying(25) NOT NULL,
    email text NOT NULL,
    street text NOT NULL,
    city text NOT NULL,
    state text NOT NULL,
    zip_code text NOT NULL,
    CONSTRAINT pk_stores PRIMARY KEY (store_id)
);

CREATE TABLE silver.users (
    id uuid NOT NULL,
    email text NOT NULL,
    first_name text NOT NULL,
    last_name text NOT NULL,
    password_hash text NOT NULL,
    CONSTRAINT pk_users PRIMARY KEY (id)
);

CREATE TABLE silver.products (
    product_id integer GENERATED BY DEFAULT AS IDENTITY,
    product_name character varying(500) NOT NULL,
    brand_id integer NOT NULL,
    category_id integer NOT NULL,
    model_year integer NOT NULL,
    list_price numeric NOT NULL,
    CONSTRAINT pk_products PRIMARY KEY (product_id),
    CONSTRAINT fk_products_brands_brand_id FOREIGN KEY (brand_id) REFERENCES silver.brands (brand_id) ON DELETE CASCADE,
    CONSTRAINT fk_products_categories_category_id FOREIGN KEY (category_id) REFERENCES silver.categories (category_id) ON DELETE CASCADE
);

CREATE TABLE silver.orders (
    order_id integer GENERATED BY DEFAULT AS IDENTITY,
    customer_id integer NOT NULL,
    order_status integer NOT NULL,
    order_date timestamp with time zone NOT NULL,
    required_date timestamp with time zone,
    shipped_date timestamp with time zone,
    store_id integer NOT NULL,
    staff_id integer NOT NULL,
    CONSTRAINT pk_orders PRIMARY KEY (order_id),
    CONSTRAINT fk_orders_customers_customer_id FOREIGN KEY (customer_id) REFERENCES silver.customers (customer_id) ON DELETE CASCADE,
    CONSTRAINT fk_orders_staffs_staff_id FOREIGN KEY (staff_id) REFERENCES silver.staffs (staff_id) ON DELETE CASCADE,
    CONSTRAINT fk_orders_stores_store_id FOREIGN KEY (store_id) REFERENCES silver.stores (store_id) ON DELETE CASCADE
);

CREATE TABLE silver.todo_items (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    description text NOT NULL,
    due_date timestamp with time zone,
    labels text[] NOT NULL,
    is_completed boolean NOT NULL,
    created_at timestamp with time zone NOT NULL,
    completed_at timestamp with time zone,
    priority integer NOT NULL,
    CONSTRAINT pk_todo_items PRIMARY KEY (id),
    CONSTRAINT fk_todo_items_users_user_id FOREIGN KEY (user_id) REFERENCES silver.users (id) ON DELETE CASCADE
);

CREATE TABLE silver.stocks (
    store_id integer NOT NULL,
    product_id integer NOT NULL,
    quantity integer NOT NULL DEFAULT 0,
    CONSTRAINT pk_stocks PRIMARY KEY (store_id, product_id),
    CONSTRAINT fk_stocks_products_product_id FOREIGN KEY (product_id) REFERENCES silver.products (product_id) ON DELETE CASCADE,
    CONSTRAINT fk_stocks_stores_store_id FOREIGN KEY (store_id) REFERENCES silver.stores (store_id) ON DELETE CASCADE
);

CREATE TABLE silver.order_items (
    item_id integer GENERATED BY DEFAULT AS IDENTITY,
    order_id integer NOT NULL,
    product_id integer NOT NULL,
    quantity integer NOT NULL,
    list_price numeric NOT NULL,
    discount numeric NOT NULL,
    CONSTRAINT pk_order_items PRIMARY KEY (item_id),
    CONSTRAINT fk_order_items_orders_order_id FOREIGN KEY (order_id) REFERENCES silver.orders (order_id) ON DELETE CASCADE,
    CONSTRAINT fk_order_items_products_product_id FOREIGN KEY (product_id) REFERENCES silver.products (product_id) ON DELETE CASCADE
);

CREATE UNIQUE INDEX ix_customers_email ON silver.customers (email);

CREATE INDEX ix_order_items_order_id ON silver.order_items (order_id);

CREATE INDEX ix_order_items_product_id ON silver.order_items (product_id);

CREATE INDEX ix_orders_customer_id ON silver.orders (customer_id);

CREATE INDEX ix_orders_staff_id ON silver.orders (staff_id);

CREATE INDEX ix_orders_store_id ON silver.orders (store_id);

CREATE INDEX ix_products_brand_id ON silver.products (brand_id);

CREATE INDEX ix_products_category_id ON silver.products (category_id);

CREATE UNIQUE INDEX ix_staffs_email ON silver.staffs (email);

CREATE INDEX ix_staffs_manager_id ON silver.staffs (manager_id);

CREATE INDEX ix_stocks_product_id ON silver.stocks (product_id);

CREATE UNIQUE INDEX ix_stores_email ON silver.stores (email);

CREATE INDEX ix_todo_items_user_id ON silver.todo_items (user_id);

CREATE UNIQUE INDEX ix_users_email ON silver.users (email);

INSERT INTO public."__EFMigrationsHistory" (migration_id, product_version)
VALUES ('20250621140814_Create_Database', '9.0.5');

COMMIT;

